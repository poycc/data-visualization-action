{"version":3,"sources":["pages/Canvas/Basic/Clock/draw.ts","pages/Canvas/Basic/Clock/style.module.scss","utils/index.ts","pages/Canvas/Basic/Clock/index.tsx"],"names":["Draw","canvas","context","FONT_HEIGHT","MARGIN","NUMERAL_SPACING","RADIUS","HAND_RADIUS","HAND_TRUNCATION","HOUR_HAND_TRUNCATION","drawCenter","beginPath","arc","width","height","Math","PI","fill","drawNumerals","angle","numeralWidth","numeral","measureText","toString","fillText","cos","sin","drawHand","loc","isHour","handRadius","moveTo","lineTo","stroke","drawHands","date","Date","hour","getHours","getMinutes","getSeconds","drawCircle","drawAction","clearRect","this","module","exports","setupCanvas","ref","callback","contextId","current","dpr","window","devicePixelRatio","rect","getBoundingClientRect","style","ctx","getContext","scale","windowToCanvas","x","y","bBox","left","top","Clock","canvasRef","useRef","useState","countDown","setCountDown","countDownRef","draw","useCallback","drawClass","timer","setInterval","useEffect","clearInterval","className","styles","main"],"mappings":"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","file":"static/js/2.abf44912.chunk.js","sourcesContent":["class Draw {\n  canvas: HTMLCanvasElement;\n\n  context: CanvasRenderingContext2D;\n\n  FONT_HEIGHT: number;\n\n  MARGIN: number;\n\n  NUMERAL_SPACING: number;\n\n  RADIUS: number;\n\n  HAND_RADIUS: number;\n\n  HAND_TRUNCATION: number;\n\n  HOUR_HAND_TRUNCATION: number;\n\n  constructor(canvas: HTMLCanvasElement, context: CanvasRenderingContext2D) {\n    this.canvas = canvas;\n    this.context = context;\n    this.FONT_HEIGHT = 15;\n    this.MARGIN = 35;\n    this.NUMERAL_SPACING = 20;\n    this.RADIUS = canvas.width / 2 - this.MARGIN;\n    this.HAND_RADIUS = this.RADIUS + this.NUMERAL_SPACING;\n    this.HAND_TRUNCATION = canvas.width / 25;\n    this.HOUR_HAND_TRUNCATION = canvas.width / 10;\n  }\n\n  drawCenter = () => {\n    this.context.beginPath();\n    this.context.arc(\n      this.canvas.width / 2,\n      this.canvas.height / 2,\n      5,\n      0,\n      Math.PI * 2,\n      true,\n    );\n    this.context.fill();\n  };\n\n  drawNumerals = () => {\n    let angle = 0;\n    let numeralWidth = 0;\n\n    for (let numeral = 1; numeral < 13; numeral += 1) {\n      angle = (Math.PI / 6) * (numeral - 3);\n      numeralWidth = this.context.measureText(numeral.toString()).width;\n      this.context.fillText(\n        numeral.toString(),\n        this.canvas.width / 2 +\n          Math.cos(angle) * this.HAND_RADIUS -\n          numeralWidth / 2,\n        this.canvas.height / 2 +\n          Math.sin(angle) * this.HAND_RADIUS +\n          this.FONT_HEIGHT / 3,\n      );\n    }\n  };\n\n  drawHand = (loc: number, isHour: boolean) => {\n    const angle = Math.PI * 2 * (loc / 60) - Math.PI / 2;\n    const handRadius = isHour\n      ? this.RADIUS - this.HAND_TRUNCATION - this.HOUR_HAND_TRUNCATION\n      : this.RADIUS - this.HAND_TRUNCATION;\n\n    this.context.moveTo(this.canvas.width / 2, this.canvas.height / 2);\n    this.context.lineTo(\n      this.canvas.width / 2 + Math.cos(angle) * handRadius,\n      this.canvas.height / 2 + Math.sin(angle) * handRadius,\n    );\n    this.context.stroke();\n  };\n\n  drawHands = () => {\n    const date: Date = new Date();\n    let hour: number = date.getHours();\n    hour = hour > 12 ? hour - 12 : hour;\n\n    this.drawHand(hour * 5 + (date.getMinutes() / 60) * 5, true);\n    this.drawHand(date.getMinutes(), false);\n    this.drawHand(date.getSeconds(), false);\n  };\n\n  drawCircle = () => {\n    this.context.beginPath();\n    this.context.arc(\n      this.canvas.width / 2,\n      this.canvas.height / 2,\n      this.RADIUS,\n      0,\n      Math.PI * 2,\n      true,\n    );\n    this.context.stroke();\n  };\n\n  drawAction = () => {\n    this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    this.drawCircle();\n    this.drawNumerals();\n    this.drawCenter();\n    this.drawHands();\n  };\n}\n\nexport default Draw;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"style_main__3QTbM\"};","export const setupCanvas: (\n  ref: React.RefObject<HTMLCanvasElement>,\n  callback: (\n    canvas: HTMLCanvasElement,\n    context: CanvasRenderingContext2D,\n    dpr: number,\n  ) => void,\n  contextId?: string,\n) => void = (\n  ref: React.RefObject<HTMLCanvasElement>,\n  callback: (\n    canvas: HTMLCanvasElement,\n    context: CanvasRenderingContext2D,\n    dpr: number,\n  ) => void,\n  contextId: string = '2d',\n) => {\n  if (!ref.current) return;\n  const canvas = ref.current;\n  const dpr = window.devicePixelRatio || 1;\n  const rect = canvas.getBoundingClientRect();\n  const { width, height } = rect;\n  /* eslint no-param-reassign: [\"error\", { \"props\": false }] */\n  canvas.style.width = `${width}px`;\n  canvas.style.height = `${height}px`;\n  canvas.width = rect.width * dpr;\n  canvas.height = rect.height * dpr;\n  const ctx = canvas.getContext(contextId);\n\n  if (ctx && 'scale' in ctx) {\n    ctx.scale(dpr, dpr);\n    callback(canvas, ctx, dpr);\n  }\n};\n\nexport const windowToCanvas: (\n  canvas: HTMLCanvasElement,\n  x: number,\n  y: number,\n) => { x: number; y: number } = (canvas, x, y) => {\n  const bBox = canvas.getBoundingClientRect();\n  return {\n    x: x - bBox.left,\n    y: y - bBox.top,\n  };\n};\n","import React, { useRef, useEffect, useCallback, useState } from 'react';\nimport { setupCanvas } from 'src/utils';\nimport Draw from './draw';\nimport styles from './style.module.scss';\n\nconst Clock: React.FC = () => {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const [countDown, setCountDown] = useState<number>(0);\n\n  const countDownRef = useRef(countDown);\n  countDownRef.current = countDown;\n\n  const draw = useCallback(() => {\n    setupCanvas(canvasRef, (canvas, context) => {\n      const drawClass = new Draw(canvas, context);\n      const timer: number = window.setInterval(\n        () => drawClass.drawAction(),\n        1000,\n      );\n      setCountDown(timer);\n    });\n  }, []);\n\n  useEffect(() => {\n    draw();\n    return () => clearInterval(countDownRef.current);\n  }, [draw]);\n\n  return (\n    <div className={styles.main}>\n      <canvas width={400} height={400} ref={canvasRef} />\n    </div>\n  );\n};\n\nexport default Clock;\n"],"sourceRoot":""}