{"version":3,"sources":["pages/D3js/Basic/LineChart/ExampleOne/index.tsx"],"names":["Index","useEffect","dom","document","getElementById","getBoundingClientRect","dataset","country","gdp","width","padding","colors","gdpMax","map","item","currentGdpMax","d3","d","svg","append","attr","xScale","domain","range","yScale","linePath","x","y","curve","selectAll","data","enter","i","xAxis","ticks","tickFormat","yAxis","call","gMark","text","draw","span","id","style"],"mappings":"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","file":"static/js/8.9a6480b3.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\nimport { Col } from 'antd';\nimport * as d3 from 'd3';\n\nconst Index: React.FC = () => {\n  const draw = () => {\n    const dom = document.getElementById('line-1')?.getBoundingClientRect();\n    const dataset = [\n      {\n        country: 'china',\n        gdp: [\n          [2000, 11920],\n          [2001, 13170],\n          [2002, 14550],\n          [2003, 16500],\n          [2004, 19440],\n          [2005, 22870],\n          [2006, 27930],\n          [2007, 35040],\n          [2008, 45470],\n          [2009, 51050],\n          [2010, 59490],\n          [2011, 73140],\n          [2012, 83860],\n          [2013, 103550],\n        ],\n      },\n      {\n        country: 'japan',\n        gdp: [\n          [2000, 47310],\n          [2001, 41590],\n          [2002, 39800],\n          [2003, 43020],\n          [2004, 46550],\n          [2005, 45710],\n          [2006, 43560],\n          [2007, 43560],\n          [2008, 48490],\n          [2009, 50350],\n          [2010, 54950],\n          [2011, 59050],\n          [2012, 59370],\n          [2013, 48980],\n        ],\n      },\n    ];\n    const width = dom?.width || 0;\n    const height = 500;\n    const padding = {\n      top: 50,\n      right: 50,\n      bottom: 50,\n      left: 50,\n    };\n\n    const colors = ['#55ABFC', '#98DDAC'];\n\n    let gdpMax = 0;\n\n    dataset.map((item) => {\n      const currentGdpMax = d3.max(item.gdp, (d) => d[1]);\n      if (currentGdpMax && currentGdpMax > gdpMax) {\n        gdpMax = currentGdpMax;\n        return null;\n      }\n      return null;\n    });\n\n    const svg = d3\n      .select('#line-1')\n      .append('svg')\n      .attr('width', width)\n      .attr('height', height);\n\n    const xScale = d3\n      .scaleLinear()\n      .domain([2000, 2013])\n      .range([0, width - padding.left - padding.right]);\n\n    const yScale = d3\n      .scaleLinear()\n      .domain([0, gdpMax * 1.1])\n      .range([height - padding.top - padding.bottom, 0]);\n\n    const linePath = d3\n      .line()\n      .x((d) => xScale(d[0]))\n      .y((d) => yScale(d[1]))\n      .curve(d3.curveBasis);\n\n    svg\n      .selectAll('path')\n      .data(dataset)\n      .enter()\n      .append('path')\n      .attr('d', (d: any) => linePath(d.gdp))\n      .attr('fill', 'none')\n      .attr('stroke-width', 3)\n      .attr('stroke', (d, i) => colors[i])\n      .attr('transform', `translate( ${padding.left}, ${padding.top} )`);\n\n    const xAxis = d3\n      .axisBottom(xScale)\n      .ticks(5)\n      .tickFormat(d3.format('d'));\n    const yAxis = d3.axisLeft(yScale);\n\n    svg\n      .append('g')\n      .attr(\n        'transform',\n        `translate( ${padding.left}, ${height - padding.bottom})`,\n      )\n      .call(xAxis);\n\n    svg\n      .append('g')\n      .attr('transform', `translate(${padding.left},${padding.top})`)\n      .call(yAxis);\n\n    const markStep = 80;\n\n    const gMark = svg\n      .selectAll('.gMark')\n      .data(dataset)\n      .enter()\n      .append('g')\n      .attr(\n        'transform',\n        (d, i) =>\n          `translate(${padding.left + i * markStep},${height -\n            padding.bottom +\n            40})`,\n      );\n\n    gMark\n      .append('rect')\n      .attr('x', 0)\n      .attr('y', 0)\n      .attr('width', 10)\n      .attr('height', 10)\n      .attr('fill', (d, i) => colors[i]);\n\n    gMark\n      .append('text')\n      .attr('dx', 15)\n      .attr('dy', '.5em')\n      .attr('fill', 'black')\n      .text((d) => d.country);\n  };\n\n  useEffect(() => {\n    draw();\n  }, []);\n\n  return (\n    <Col span={24}>\n      <div id=\"line-1\" style={{ width: '100%' }} />\n    </Col>\n  );\n};\n\nexport default Index;\n"],"sourceRoot":""}